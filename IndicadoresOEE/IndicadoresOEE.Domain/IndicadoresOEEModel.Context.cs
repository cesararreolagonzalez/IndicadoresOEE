//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IndicadoresOEE.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PrimaryConnection : DbContext
    {
        public PrimaryConnection()
            : base("name=PrimaryConnection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Almacen> Almacen { get; set; }
        public virtual DbSet<Almacen_UnidadMedida> Almacen_UnidadMedida { get; set; }
        public virtual DbSet<Bitacora> Bitacora { get; set; }
        public virtual DbSet<BitacoraIndicador> BitacoraIndicador { get; set; }
        public virtual DbSet<BitacoraMovimientosIndicador> BitacoraMovimientosIndicador { get; set; }
        public virtual DbSet<Centro> Centro { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<Equipo> Equipo { get; set; }
        public virtual DbSet<Indicador> Indicador { get; set; }
        public virtual DbSet<Indicador_Capacidad> Indicador_Capacidad { get; set; }
        public virtual DbSet<Indicador_Laboratorio> Indicador_Laboratorio { get; set; }
        public virtual DbSet<Indicador_Paro> Indicador_Paro { get; set; }
        public virtual DbSet<Indicador_Rechazo> Indicador_Rechazo { get; set; }
        public virtual DbSet<Indicador_Tiempo> Indicador_Tiempo { get; set; }
        public virtual DbSet<Indicador_V2> Indicador_V2 { get; set; }
        public virtual DbSet<IndicadorParo_V2> IndicadorParo_V2 { get; set; }
        public virtual DbSet<IndicadorRechazo_V2> IndicadorRechazo_V2 { get; set; }
        public virtual DbSet<IndicadorTiempo_V2> IndicadorTiempo_V2 { get; set; }
        public virtual DbSet<IndicadorVelocidad_V2> IndicadorVelocidad_V2 { get; set; }
        public virtual DbSet<Laboratorio> Laboratorio { get; set; }
        public virtual DbSet<Linea> Linea { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<Paro> Paro { get; set; }
        public virtual DbSet<ParosPlaneadosMes_V2> ParosPlaneadosMes_V2 { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<Planta> Planta { get; set; }
        public virtual DbSet<Proceso> Proceso { get; set; }
        public virtual DbSet<Proceso_UsuariosMensaje> Proceso_UsuariosMensaje { get; set; }
        public virtual DbSet<Proceso_Velocidad> Proceso_Velocidad { get; set; }
        public virtual DbSet<Rechazo> Rechazo { get; set; }
        public virtual DbSet<Seccion> Seccion { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoAlmacen> TipoAlmacen { get; set; }
        public virtual DbSet<UnidadMedida> UnidadMedida { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioCapacidad> UsuarioCapacidad { get; set; }
        public virtual DbSet<Equipo_Servicio> Equipo_Servicio { get; set; }
        public virtual DbSet<Indicador_Servicio> Indicador_Servicio { get; set; }
        public virtual DbSet<Servicio> Servicio { get; set; }
        public virtual DbSet<vw_grafica_indicadores> vw_grafica_indicadores { get; set; }
        public virtual DbSet<vw_paros> vw_paros { get; set; }
        public virtual DbSet<vw_paros_programados> vw_paros_programados { get; set; }
        public virtual DbSet<vw_paros_programados_V2> vw_paros_programados_V2 { get; set; }
        public virtual DbSet<vw_usuarios> vw_usuarios { get; set; }
        public virtual DbSet<vw_usuarios_procesos> vw_usuarios_procesos { get; set; }
    
        [DbFunction("PrimaryConnection", "fn_acum_paros")]
        public virtual IQueryable<fn_acum_paros_Result> fn_acum_paros(Nullable<System.DateTime> fecha_inicial, Nullable<System.DateTime> fecha_final, string turno_inicial, string turno_final)
        {
            var fecha_inicialParameter = fecha_inicial.HasValue ?
                new ObjectParameter("fecha_inicial", fecha_inicial) :
                new ObjectParameter("fecha_inicial", typeof(System.DateTime));
    
            var fecha_finalParameter = fecha_final.HasValue ?
                new ObjectParameter("fecha_final", fecha_final) :
                new ObjectParameter("fecha_final", typeof(System.DateTime));
    
            var turno_inicialParameter = turno_inicial != null ?
                new ObjectParameter("turno_inicial", turno_inicial) :
                new ObjectParameter("turno_inicial", typeof(string));
    
            var turno_finalParameter = turno_final != null ?
                new ObjectParameter("turno_final", turno_final) :
                new ObjectParameter("turno_final", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_acum_paros_Result>("[PrimaryConnection].[fn_acum_paros](@fecha_inicial, @fecha_final, @turno_inicial, @turno_final)", fecha_inicialParameter, fecha_finalParameter, turno_inicialParameter, turno_finalParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_acum_paros2")]
        public virtual IQueryable<fn_acum_paros2_Result> fn_acum_paros2(Nullable<System.DateTime> fecha_inicial, Nullable<System.DateTime> fecha_final, string turno_inicial, string turno_final, Nullable<long> id_proceso)
        {
            var fecha_inicialParameter = fecha_inicial.HasValue ?
                new ObjectParameter("fecha_inicial", fecha_inicial) :
                new ObjectParameter("fecha_inicial", typeof(System.DateTime));
    
            var fecha_finalParameter = fecha_final.HasValue ?
                new ObjectParameter("fecha_final", fecha_final) :
                new ObjectParameter("fecha_final", typeof(System.DateTime));
    
            var turno_inicialParameter = turno_inicial != null ?
                new ObjectParameter("turno_inicial", turno_inicial) :
                new ObjectParameter("turno_inicial", typeof(string));
    
            var turno_finalParameter = turno_final != null ?
                new ObjectParameter("turno_final", turno_final) :
                new ObjectParameter("turno_final", typeof(string));
    
            var id_procesoParameter = id_proceso.HasValue ?
                new ObjectParameter("id_proceso", id_proceso) :
                new ObjectParameter("id_proceso", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_acum_paros2_Result>("[PrimaryConnection].[fn_acum_paros2](@fecha_inicial, @fecha_final, @turno_inicial, @turno_final, @id_proceso)", fecha_inicialParameter, fecha_finalParameter, turno_inicialParameter, turno_finalParameter, id_procesoParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro")]
        public virtual IQueryable<fn_sumatoria_paro_Result> fn_sumatoria_paro(string fechaInicio, string fechaFin, string turnoInicio, string turnoFin, Nullable<long> indiceVelocidad, string listaIndicesProcesos)
        {
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            var turnoInicioParameter = turnoInicio != null ?
                new ObjectParameter("TurnoInicio", turnoInicio) :
                new ObjectParameter("TurnoInicio", typeof(string));
    
            var turnoFinParameter = turnoFin != null ?
                new ObjectParameter("TurnoFin", turnoFin) :
                new ObjectParameter("TurnoFin", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_Result>("[PrimaryConnection].[fn_sumatoria_paro](@FechaInicio, @FechaFin, @TurnoInicio, @TurnoFin, @IndiceVelocidad, @ListaIndicesProcesos)", fechaInicioParameter, fechaFinParameter, turnoInicioParameter, turnoFinParameter, indiceVelocidadParameter, listaIndicesProcesosParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro_folio")]
        public virtual IQueryable<fn_sumatoria_paro_folio_Result> fn_sumatoria_paro_folio(string fecha_Inicio, string fecha_Fin, string turno_Inicio, string turno_Fin, Nullable<long> velocidad)
        {
            var fecha_InicioParameter = fecha_Inicio != null ?
                new ObjectParameter("Fecha_Inicio", fecha_Inicio) :
                new ObjectParameter("Fecha_Inicio", typeof(string));
    
            var fecha_FinParameter = fecha_Fin != null ?
                new ObjectParameter("Fecha_Fin", fecha_Fin) :
                new ObjectParameter("Fecha_Fin", typeof(string));
    
            var turno_InicioParameter = turno_Inicio != null ?
                new ObjectParameter("Turno_Inicio", turno_Inicio) :
                new ObjectParameter("Turno_Inicio", typeof(string));
    
            var turno_FinParameter = turno_Fin != null ?
                new ObjectParameter("Turno_Fin", turno_Fin) :
                new ObjectParameter("Turno_Fin", typeof(string));
    
            var velocidadParameter = velocidad.HasValue ?
                new ObjectParameter("velocidad", velocidad) :
                new ObjectParameter("velocidad", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_folio_Result>("[PrimaryConnection].[fn_sumatoria_paro_folio](@Fecha_Inicio, @Fecha_Fin, @Turno_Inicio, @Turno_Fin, @velocidad)", fecha_InicioParameter, fecha_FinParameter, turno_InicioParameter, turno_FinParameter, velocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro_folio_fechas")]
        public virtual IQueryable<fn_sumatoria_paro_folio_fechas_Result> fn_sumatoria_paro_folio_fechas(string fecha_Inicio, string fecha_Fin, string turno_Inicio, string turno_Fin, Nullable<long> velocidad)
        {
            var fecha_InicioParameter = fecha_Inicio != null ?
                new ObjectParameter("Fecha_Inicio", fecha_Inicio) :
                new ObjectParameter("Fecha_Inicio", typeof(string));
    
            var fecha_FinParameter = fecha_Fin != null ?
                new ObjectParameter("Fecha_Fin", fecha_Fin) :
                new ObjectParameter("Fecha_Fin", typeof(string));
    
            var turno_InicioParameter = turno_Inicio != null ?
                new ObjectParameter("Turno_Inicio", turno_Inicio) :
                new ObjectParameter("Turno_Inicio", typeof(string));
    
            var turno_FinParameter = turno_Fin != null ?
                new ObjectParameter("Turno_Fin", turno_Fin) :
                new ObjectParameter("Turno_Fin", typeof(string));
    
            var velocidadParameter = velocidad.HasValue ?
                new ObjectParameter("velocidad", velocidad) :
                new ObjectParameter("velocidad", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_folio_fechas_Result>("[PrimaryConnection].[fn_sumatoria_paro_folio_fechas](@Fecha_Inicio, @Fecha_Fin, @Turno_Inicio, @Turno_Fin, @velocidad)", fecha_InicioParameter, fecha_FinParameter, turno_InicioParameter, turno_FinParameter, velocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro_folio_fechas_V2")]
        public virtual IQueryable<fn_sumatoria_paro_folio_fechas_V2_Result> fn_sumatoria_paro_folio_fechas_V2(string fecha_Inicio, string fecha_Fin, string turno_Inicio, string turno_Fin, Nullable<long> velocidad)
        {
            var fecha_InicioParameter = fecha_Inicio != null ?
                new ObjectParameter("Fecha_Inicio", fecha_Inicio) :
                new ObjectParameter("Fecha_Inicio", typeof(string));
    
            var fecha_FinParameter = fecha_Fin != null ?
                new ObjectParameter("Fecha_Fin", fecha_Fin) :
                new ObjectParameter("Fecha_Fin", typeof(string));
    
            var turno_InicioParameter = turno_Inicio != null ?
                new ObjectParameter("Turno_Inicio", turno_Inicio) :
                new ObjectParameter("Turno_Inicio", typeof(string));
    
            var turno_FinParameter = turno_Fin != null ?
                new ObjectParameter("Turno_Fin", turno_Fin) :
                new ObjectParameter("Turno_Fin", typeof(string));
    
            var velocidadParameter = velocidad.HasValue ?
                new ObjectParameter("velocidad", velocidad) :
                new ObjectParameter("velocidad", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_folio_fechas_V2_Result>("[PrimaryConnection].[fn_sumatoria_paro_folio_fechas_V2](@Fecha_Inicio, @Fecha_Fin, @Turno_Inicio, @Turno_Fin, @velocidad)", fecha_InicioParameter, fecha_FinParameter, turno_InicioParameter, turno_FinParameter, velocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro_folio_V2")]
        public virtual IQueryable<fn_sumatoria_paro_folio_V2_Result> fn_sumatoria_paro_folio_V2(string fecha_Inicio, string fecha_Fin, string turno_Inicio, string turno_Fin, Nullable<long> velocidad)
        {
            var fecha_InicioParameter = fecha_Inicio != null ?
                new ObjectParameter("Fecha_Inicio", fecha_Inicio) :
                new ObjectParameter("Fecha_Inicio", typeof(string));
    
            var fecha_FinParameter = fecha_Fin != null ?
                new ObjectParameter("Fecha_Fin", fecha_Fin) :
                new ObjectParameter("Fecha_Fin", typeof(string));
    
            var turno_InicioParameter = turno_Inicio != null ?
                new ObjectParameter("Turno_Inicio", turno_Inicio) :
                new ObjectParameter("Turno_Inicio", typeof(string));
    
            var turno_FinParameter = turno_Fin != null ?
                new ObjectParameter("Turno_Fin", turno_Fin) :
                new ObjectParameter("Turno_Fin", typeof(string));
    
            var velocidadParameter = velocidad.HasValue ?
                new ObjectParameter("velocidad", velocidad) :
                new ObjectParameter("velocidad", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_folio_V2_Result>("[PrimaryConnection].[fn_sumatoria_paro_folio_V2](@Fecha_Inicio, @Fecha_Fin, @Turno_Inicio, @Turno_Fin, @velocidad)", fecha_InicioParameter, fecha_FinParameter, turno_InicioParameter, turno_FinParameter, velocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "fn_sumatoria_paro_V2")]
        public virtual IQueryable<fn_sumatoria_paro_V2_Result> fn_sumatoria_paro_V2(string fechaInicio, string fechaFin, string turnoInicio, string turnoFin, Nullable<long> indiceVelocidad, string listaIndicesProcesos)
        {
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            var turnoInicioParameter = turnoInicio != null ?
                new ObjectParameter("TurnoInicio", turnoInicio) :
                new ObjectParameter("TurnoInicio", typeof(string));
    
            var turnoFinParameter = turnoFin != null ?
                new ObjectParameter("TurnoFin", turnoFin) :
                new ObjectParameter("TurnoFin", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_sumatoria_paro_V2_Result>("[PrimaryConnection].[fn_sumatoria_paro_V2](@FechaInicio, @FechaFin, @TurnoInicio, @TurnoFin, @IndiceVelocidad, @ListaIndicesProcesos)", fechaInicioParameter, fechaFinParameter, turnoInicioParameter, turnoFinParameter, indiceVelocidadParameter, listaIndicesProcesosParameter);
        }
    
        public virtual int spr_grafica_indicadores_paros_programados(string fechaInicial, string fechaFinal, string turnoInicial, string turnoFinal, string tipoAgrupacion, string estaAgrupadoPorTurnos, Nullable<int> indiceVelocidad, string listaProcesos)
        {
            var fechaInicialParameter = fechaInicial != null ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(string));
    
            var fechaFinalParameter = fechaFinal != null ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(string));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var tipoAgrupacionParameter = tipoAgrupacion != null ?
                new ObjectParameter("TipoAgrupacion", tipoAgrupacion) :
                new ObjectParameter("TipoAgrupacion", typeof(string));
    
            var estaAgrupadoPorTurnosParameter = estaAgrupadoPorTurnos != null ?
                new ObjectParameter("EstaAgrupadoPorTurnos", estaAgrupadoPorTurnos) :
                new ObjectParameter("EstaAgrupadoPorTurnos", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(int));
    
            var listaProcesosParameter = listaProcesos != null ?
                new ObjectParameter("ListaProcesos", listaProcesos) :
                new ObjectParameter("ListaProcesos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_grafica_indicadores_paros_programados", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, tipoAgrupacionParameter, estaAgrupadoPorTurnosParameter, indiceVelocidadParameter, listaProcesosParameter);
        }
    
        public virtual int spr_grafica_paros(string fechainicial, string fechafinal, string agrupador, string procesos, string paros)
        {
            var fechainicialParameter = fechainicial != null ?
                new ObjectParameter("fechainicial", fechainicial) :
                new ObjectParameter("fechainicial", typeof(string));
    
            var fechafinalParameter = fechafinal != null ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(string));
    
            var agrupadorParameter = agrupador != null ?
                new ObjectParameter("agrupador", agrupador) :
                new ObjectParameter("agrupador", typeof(string));
    
            var procesosParameter = procesos != null ?
                new ObjectParameter("procesos", procesos) :
                new ObjectParameter("procesos", typeof(string));
    
            var parosParameter = paros != null ?
                new ObjectParameter("paros", paros) :
                new ObjectParameter("paros", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_grafica_paros", fechainicialParameter, fechafinalParameter, agrupadorParameter, procesosParameter, parosParameter);
        }
    
        public virtual int spr_grafica_parosV2(string fechainicial, string fechafinal, string agrupador, string procesos, string paros)
        {
            var fechainicialParameter = fechainicial != null ?
                new ObjectParameter("fechainicial", fechainicial) :
                new ObjectParameter("fechainicial", typeof(string));
    
            var fechafinalParameter = fechafinal != null ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(string));
    
            var agrupadorParameter = agrupador != null ?
                new ObjectParameter("agrupador", agrupador) :
                new ObjectParameter("agrupador", typeof(string));
    
            var procesosParameter = procesos != null ?
                new ObjectParameter("procesos", procesos) :
                new ObjectParameter("procesos", typeof(string));
    
            var parosParameter = paros != null ?
                new ObjectParameter("paros", paros) :
                new ObjectParameter("paros", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_grafica_parosV2", fechainicialParameter, fechafinalParameter, agrupadorParameter, procesosParameter, parosParameter);
        }
    
        public virtual ObjectResult<BusquedaIndicadores_SP_Result> BusquedaIndicadores_SP(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string listaIndicesProcesos, Nullable<long> indiceVelocidad, Nullable<short> tipoVelocidad)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var tipoVelocidadParameter = tipoVelocidad.HasValue ?
                new ObjectParameter("TipoVelocidad", tipoVelocidad) :
                new ObjectParameter("TipoVelocidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusquedaIndicadores_SP_Result>("BusquedaIndicadores_SP", fechaInicialParameter, fechaFinalParameter, listaIndicesProcesosParameter, indiceVelocidadParameter, tipoVelocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionGraficaIndicadores")]
        public virtual IQueryable<FuncionGraficaIndicadores_Result> FuncionGraficaIndicadores(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string listaIndicesProcesos, Nullable<long> indiceVelocidad, Nullable<short> tipoVelocidad)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var tipoVelocidadParameter = tipoVelocidad.HasValue ?
                new ObjectParameter("TipoVelocidad", tipoVelocidad) :
                new ObjectParameter("TipoVelocidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionGraficaIndicadores_Result>("[PrimaryConnection].[FuncionGraficaIndicadores](@FechaInicial, @FechaFinal, @ListaIndicesProcesos, @IndiceVelocidad, @TipoVelocidad)", fechaInicialParameter, fechaFinalParameter, listaIndicesProcesosParameter, indiceVelocidadParameter, tipoVelocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionGraficaProduccion")]
        public virtual IQueryable<FuncionGraficaProduccion_Result> FuncionGraficaProduccion(string listaIndicesProcesos, string orden)
        {
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            var ordenParameter = orden != null ?
                new ObjectParameter("Orden", orden) :
                new ObjectParameter("Orden", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionGraficaProduccion_Result>("[PrimaryConnection].[FuncionGraficaProduccion](@ListaIndicesProcesos, @Orden)", listaIndicesProcesosParameter, ordenParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionParosAcumulados")]
        public virtual IQueryable<FuncionParosAcumulados_Result> FuncionParosAcumulados(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string turnoInicial, string turnoFinal, Nullable<long> indiceProceso)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var indiceProcesoParameter = indiceProceso.HasValue ?
                new ObjectParameter("IndiceProceso", indiceProceso) :
                new ObjectParameter("IndiceProceso", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionParosAcumulados_Result>("[PrimaryConnection].[FuncionParosAcumulados](@FechaInicial, @FechaFinal, @TurnoInicial, @TurnoFinal, @IndiceProceso)", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, indiceProcesoParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionParosProgramados")]
        public virtual IQueryable<FuncionParosProgramados_Result> FuncionParosProgramados(string listaIndicesProcesos)
        {
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionParosProgramados_Result>("[PrimaryConnection].[FuncionParosProgramados](@ListaIndicesProcesos)", listaIndicesProcesosParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionProcesosPorUsuario")]
        public virtual IQueryable<FuncionProcesosPorUsuario_Result> FuncionProcesosPorUsuario(Nullable<long> indiceUsuario, Nullable<long> indiceCentro, Nullable<long> indiceDepartamento, Nullable<long> indiceLinea, Nullable<long> indiceProceso)
        {
            var indiceUsuarioParameter = indiceUsuario.HasValue ?
                new ObjectParameter("IndiceUsuario", indiceUsuario) :
                new ObjectParameter("IndiceUsuario", typeof(long));
    
            var indiceCentroParameter = indiceCentro.HasValue ?
                new ObjectParameter("IndiceCentro", indiceCentro) :
                new ObjectParameter("IndiceCentro", typeof(long));
    
            var indiceDepartamentoParameter = indiceDepartamento.HasValue ?
                new ObjectParameter("IndiceDepartamento", indiceDepartamento) :
                new ObjectParameter("IndiceDepartamento", typeof(long));
    
            var indiceLineaParameter = indiceLinea.HasValue ?
                new ObjectParameter("IndiceLinea", indiceLinea) :
                new ObjectParameter("IndiceLinea", typeof(long));
    
            var indiceProcesoParameter = indiceProceso.HasValue ?
                new ObjectParameter("IndiceProceso", indiceProceso) :
                new ObjectParameter("IndiceProceso", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionProcesosPorUsuario_Result>("[PrimaryConnection].[FuncionProcesosPorUsuario](@IndiceUsuario, @IndiceCentro, @IndiceDepartamento, @IndiceLinea, @IndiceProceso)", indiceUsuarioParameter, indiceCentroParameter, indiceDepartamentoParameter, indiceLineaParameter, indiceProcesoParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionRechazosParos")]
        public virtual IQueryable<FuncionRechazosParos_Result> FuncionRechazosParos(string listaIndicesProcesos, Nullable<long> indiceVelocidad, Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string tipoIndicador, string tipoDato)
        {
            var listaIndicesProcesosParameter = listaIndicesProcesos != null ?
                new ObjectParameter("ListaIndicesProcesos", listaIndicesProcesos) :
                new ObjectParameter("ListaIndicesProcesos", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var tipoIndicadorParameter = tipoIndicador != null ?
                new ObjectParameter("TipoIndicador", tipoIndicador) :
                new ObjectParameter("TipoIndicador", typeof(string));
    
            var tipoDatoParameter = tipoDato != null ?
                new ObjectParameter("TipoDato", tipoDato) :
                new ObjectParameter("TipoDato", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionRechazosParos_Result>("[PrimaryConnection].[FuncionRechazosParos](@ListaIndicesProcesos, @IndiceVelocidad, @FechaInicial, @FechaFinal, @TipoIndicador, @TipoDato)", listaIndicesProcesosParameter, indiceVelocidadParameter, fechaInicialParameter, fechaFinalParameter, tipoIndicadorParameter, tipoDatoParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionSumatoriaParo")]
        public virtual IQueryable<FuncionSumatoriaParo_Result> FuncionSumatoriaParo(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string turnoInicial, string turnoFinal, Nullable<int> nivel, Nullable<long> indiceUsuario, Nullable<long> indiceCentro, Nullable<long> indiceDepartamento, Nullable<long> indiceLinea, Nullable<long> indiceProceso, Nullable<long> indiceVelocidad, Nullable<long> indiceParoPadre, Nullable<short> tipoVelocidad)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var nivelParameter = nivel.HasValue ?
                new ObjectParameter("Nivel", nivel) :
                new ObjectParameter("Nivel", typeof(int));
    
            var indiceUsuarioParameter = indiceUsuario.HasValue ?
                new ObjectParameter("IndiceUsuario", indiceUsuario) :
                new ObjectParameter("IndiceUsuario", typeof(long));
    
            var indiceCentroParameter = indiceCentro.HasValue ?
                new ObjectParameter("IndiceCentro", indiceCentro) :
                new ObjectParameter("IndiceCentro", typeof(long));
    
            var indiceDepartamentoParameter = indiceDepartamento.HasValue ?
                new ObjectParameter("IndiceDepartamento", indiceDepartamento) :
                new ObjectParameter("IndiceDepartamento", typeof(long));
    
            var indiceLineaParameter = indiceLinea.HasValue ?
                new ObjectParameter("IndiceLinea", indiceLinea) :
                new ObjectParameter("IndiceLinea", typeof(long));
    
            var indiceProcesoParameter = indiceProceso.HasValue ?
                new ObjectParameter("IndiceProceso", indiceProceso) :
                new ObjectParameter("IndiceProceso", typeof(long));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var indiceParoPadreParameter = indiceParoPadre.HasValue ?
                new ObjectParameter("IndiceParoPadre", indiceParoPadre) :
                new ObjectParameter("IndiceParoPadre", typeof(long));
    
            var tipoVelocidadParameter = tipoVelocidad.HasValue ?
                new ObjectParameter("TipoVelocidad", tipoVelocidad) :
                new ObjectParameter("TipoVelocidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionSumatoriaParo_Result>("[PrimaryConnection].[FuncionSumatoriaParo](@FechaInicial, @FechaFinal, @TurnoInicial, @TurnoFinal, @Nivel, @IndiceUsuario, @IndiceCentro, @IndiceDepartamento, @IndiceLinea, @IndiceProceso, @IndiceVelocidad, @IndiceParoPadre, @TipoVelocidad)", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, nivelParameter, indiceUsuarioParameter, indiceCentroParameter, indiceDepartamentoParameter, indiceLineaParameter, indiceProcesoParameter, indiceVelocidadParameter, indiceParoPadreParameter, tipoVelocidadParameter);
        }
    
        [DbFunction("PrimaryConnection", "FuncionSumatoriaParoFolio")]
        public virtual IQueryable<FuncionSumatoriaParoFolio_Result> FuncionSumatoriaParoFolio(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string turnoInicial, string turnoFinal, Nullable<long> indiceUsuario, Nullable<long> indiceCentro, Nullable<long> indiceDepartamento, Nullable<long> indiceLinea, Nullable<long> indiceProceso, Nullable<long> indiceVelocidad, Nullable<short> tipoVelocidad)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var indiceUsuarioParameter = indiceUsuario.HasValue ?
                new ObjectParameter("IndiceUsuario", indiceUsuario) :
                new ObjectParameter("IndiceUsuario", typeof(long));
    
            var indiceCentroParameter = indiceCentro.HasValue ?
                new ObjectParameter("IndiceCentro", indiceCentro) :
                new ObjectParameter("IndiceCentro", typeof(long));
    
            var indiceDepartamentoParameter = indiceDepartamento.HasValue ?
                new ObjectParameter("IndiceDepartamento", indiceDepartamento) :
                new ObjectParameter("IndiceDepartamento", typeof(long));
    
            var indiceLineaParameter = indiceLinea.HasValue ?
                new ObjectParameter("IndiceLinea", indiceLinea) :
                new ObjectParameter("IndiceLinea", typeof(long));
    
            var indiceProcesoParameter = indiceProceso.HasValue ?
                new ObjectParameter("IndiceProceso", indiceProceso) :
                new ObjectParameter("IndiceProceso", typeof(long));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var tipoVelocidadParameter = tipoVelocidad.HasValue ?
                new ObjectParameter("TipoVelocidad", tipoVelocidad) :
                new ObjectParameter("TipoVelocidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FuncionSumatoriaParoFolio_Result>("[PrimaryConnection].[FuncionSumatoriaParoFolio](@FechaInicial, @FechaFinal, @TurnoInicial, @TurnoFinal, @IndiceUsuario, @IndiceCentro, @IndiceDepartamento, @IndiceLinea, @IndiceProceso, @IndiceVelocidad, @TipoVelocidad)", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, indiceUsuarioParameter, indiceCentroParameter, indiceDepartamentoParameter, indiceLineaParameter, indiceProcesoParameter, indiceVelocidadParameter, tipoVelocidadParameter);
        }
    
        public virtual int GraficaIndicadores_SP(string fechaInicial, string fechaFinal, string turnoInicial, string turnoFinal, string tipoAgrupacion, string estaAgrupadoPorTurnos, Nullable<int> indiceVelocidad, string listaProcesos)
        {
            var fechaInicialParameter = fechaInicial != null ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(string));
    
            var fechaFinalParameter = fechaFinal != null ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(string));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var tipoAgrupacionParameter = tipoAgrupacion != null ?
                new ObjectParameter("TipoAgrupacion", tipoAgrupacion) :
                new ObjectParameter("TipoAgrupacion", typeof(string));
    
            var estaAgrupadoPorTurnosParameter = estaAgrupadoPorTurnos != null ?
                new ObjectParameter("EstaAgrupadoPorTurnos", estaAgrupadoPorTurnos) :
                new ObjectParameter("EstaAgrupadoPorTurnos", typeof(string));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(int));
    
            var listaProcesosParameter = listaProcesos != null ?
                new ObjectParameter("ListaProcesos", listaProcesos) :
                new ObjectParameter("ListaProcesos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GraficaIndicadores_SP", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, tipoAgrupacionParameter, estaAgrupadoPorTurnosParameter, indiceVelocidadParameter, listaProcesosParameter);
        }
    
        public virtual ObjectResult<SumatoriaParo_SP_Result> SumatoriaParo_SP(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, string turnoInicial, string turnoFinal, Nullable<int> nivel, Nullable<long> indiceUsuario, Nullable<long> indiceCentro, Nullable<long> indiceDepartamento, Nullable<long> indiceLinea, Nullable<long> indiceProceso, Nullable<long> indiceVelocidad, Nullable<long> indiceParoPadre, Nullable<short> tipoVelocidad)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var turnoInicialParameter = turnoInicial != null ?
                new ObjectParameter("TurnoInicial", turnoInicial) :
                new ObjectParameter("TurnoInicial", typeof(string));
    
            var turnoFinalParameter = turnoFinal != null ?
                new ObjectParameter("TurnoFinal", turnoFinal) :
                new ObjectParameter("TurnoFinal", typeof(string));
    
            var nivelParameter = nivel.HasValue ?
                new ObjectParameter("Nivel", nivel) :
                new ObjectParameter("Nivel", typeof(int));
    
            var indiceUsuarioParameter = indiceUsuario.HasValue ?
                new ObjectParameter("IndiceUsuario", indiceUsuario) :
                new ObjectParameter("IndiceUsuario", typeof(long));
    
            var indiceCentroParameter = indiceCentro.HasValue ?
                new ObjectParameter("IndiceCentro", indiceCentro) :
                new ObjectParameter("IndiceCentro", typeof(long));
    
            var indiceDepartamentoParameter = indiceDepartamento.HasValue ?
                new ObjectParameter("IndiceDepartamento", indiceDepartamento) :
                new ObjectParameter("IndiceDepartamento", typeof(long));
    
            var indiceLineaParameter = indiceLinea.HasValue ?
                new ObjectParameter("IndiceLinea", indiceLinea) :
                new ObjectParameter("IndiceLinea", typeof(long));
    
            var indiceProcesoParameter = indiceProceso.HasValue ?
                new ObjectParameter("IndiceProceso", indiceProceso) :
                new ObjectParameter("IndiceProceso", typeof(long));
    
            var indiceVelocidadParameter = indiceVelocidad.HasValue ?
                new ObjectParameter("IndiceVelocidad", indiceVelocidad) :
                new ObjectParameter("IndiceVelocidad", typeof(long));
    
            var indiceParoPadreParameter = indiceParoPadre.HasValue ?
                new ObjectParameter("IndiceParoPadre", indiceParoPadre) :
                new ObjectParameter("IndiceParoPadre", typeof(long));
    
            var tipoVelocidadParameter = tipoVelocidad.HasValue ?
                new ObjectParameter("TipoVelocidad", tipoVelocidad) :
                new ObjectParameter("TipoVelocidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SumatoriaParo_SP_Result>("SumatoriaParo_SP", fechaInicialParameter, fechaFinalParameter, turnoInicialParameter, turnoFinalParameter, nivelParameter, indiceUsuarioParameter, indiceCentroParameter, indiceDepartamentoParameter, indiceLineaParameter, indiceProcesoParameter, indiceVelocidadParameter, indiceParoPadreParameter, tipoVelocidadParameter);
        }
    }
}
